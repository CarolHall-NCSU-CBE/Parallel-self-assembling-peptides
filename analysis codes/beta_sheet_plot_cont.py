  #!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on 10/5/2022
@author: Sudeep
"""
#Code to perform renumber peptide residues from pdb file generated by DMD
import numpy as np
import os
import matplotlib.pyplot as plt
import matplotlib.transforms as transforms
import pandas as pd
import sys
      
def multiplot(beta1, beta2, beta3):
    
    X1=np.arange(len(beta1))
    X2=np.arange(len(beta2))
    X3=np.arange(len(beta3))
    fig=plt.figure()
    ax1 = fig.add_subplot(111)
    ax1.patch.set_linewidth(2.0)
    ax1.plot(X1, beta1, color='purple')
    ax1.plot(X2, beta2, color='orange')
    ax1.plot(X3, beta3, color='red')
    ax1.tick_params(axis='x',labelsize=16)
    ax1.tick_params(axis='y',labelsize=16)
    ax1.set_ylim(0, 1.0)
    ax1.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])
    ax1.set_xticks([0, 127.25, 254.5, 381.75, 509])
    labels=['0', '3.0', '6.0', '9.0', '12.0']
    ax1.set_xticklabels(labels)
    plt.savefig('testplot.png', dpi=600)   
    
def betasheet(file_in, snap_in, snap_out, num_chain, peplength): 

    tres = num_chain*peplength                            # Total no. of residues
    beta = []

# Read the datafile     
    df1=pd.read_csv(file_in, delimiter="\s+", header=None, skiprows=0)
    
    for i in range(snap_in,snap_out):  
        string=df1.iloc[[i],[0]].to_string(index=False, header=False)
        beta.append(float(string))
               
    beta_mean=float(sum(beta)/len(beta))
    
    print(file_in)
    print(beta_mean)
    
    beta_std=np.std(beta)
    print(beta_std)
    
    return beta

def main():
    
#*********************************************************************************
#
# Compute beta-sheet content plot
#
#*********************************************************************************

    #path = path of the file
    #path1_1 = path of the file containing betasheet content information with simulation steps
    #nsta = simulation step start
    #nend = simulation step end
    
    os.chdir(path)    
    file_in = path1_1                 
    beta1 = betasheet(file_in, nsta, nend)
    
    os.chdir(path)   
    file_in = path1_1
    beta2 = betasheet(file_in, nsta, nend)
    
    os.chdir(path)   
    file_in = path1_1                 
    beta3 = betasheet(file_in, nsta, nend)
    
    multiplot(beta1, beta2, beta3)
    
#******************************************************************************
#
# Compute beta-sheet average and standard deviation
#
#******************************************************************************
    #snap_in = simulation step start for beta-sheet average
    #snap_in = simulation step end for beta-sheet average
    #num_chain = number of peptide chains in the simulation
    #peplength = number of residues on the peptide chain
    
    os.chdir()
    file_in = path1_1
    betasheet(file_in, snap_in, snap_out, num_chain, peplength)
    
main()
